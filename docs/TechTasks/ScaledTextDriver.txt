  ScaledTextDriver - скалируемый форматировщик/расстановщик (layout) текста.

Причина(ы): сейчас MEditor использует PangoLayout, полностью, для отрисовки
 текста, точнее для расстановки/форматирования букв-глифов; однако этот механизм
 не позволяет  точно уместить текст в заданные размеры (прямоугольника), а 
 именно, методом тыка выяснилось, что:
  - по ширине текст лучше не скалировать (с помощью Cairo), так как результат
   получается плохой (буквы друг на друга наезжают, размер все равно не такой,
   какой нужно); поэтому реализован вариант подбора нужного шрифта для ширины
   (более-менее получилось, хотя можно наблюдать при редактирование текста
   его подергивание влево-вправо)
  - по высоте текст скалируется хорошо, но все равно сложно подобрать коэффициент
   (hgtMult) для того, чтобы, опять же, при редактировании текст не менялся
   в размерах по высоте.

Интерфейс: сейчас расстановщик TextRenderer работает по следующему принципу:
 - инициализация контекста (Cairo::Context, Pango::Layout);
 - по заданным размерам подобрать размер шрифта, множитель по высоте и др.
   параметры, + установить текст - DoLayout()
 - при запросе на отрисовку выполняется - pango_cairo_show_layout() - собственно
   отрисовка.
 - для отрисовки и позиционирования курсора, вставки букв используются соответ.
   функции PangoLayout, вроде *_xy_to_index() для нахождения позиции символа
   по координатам на плоскости.
 Соответственно, необходим соответ. функционал и для ScaledTextDriver. Как 
реализовать: наиболее естественный вариант - дать PangoLayout отформатировать
текст, а затем самому снять всю инфу у него и самому отрисовывать.

Замечания:
 - в качестве примера, как подобное сделано, можно посмотреть в Inkscape/sK1; также
   см. "демофункцию" cairo_show_text().
 - вообще, элементарными функциями здесь являются (использованы у Cairo-Pango 
   и Inkscape (и sK1?)):
   - cairo_show_glyphs() - обычная отрисовка (заливка);
   - cairo_glyph_path() - обведение букв по контуру.
 - дополнительно, следует прикрутить механизм Input Method для того, чтобы
   можно было вводить текст на всех языках (включая азиатские иероглифы),
   см. GtkIMContext, пример - GtkEntry:
    - сигнал "commit" - пришла новая буква (т.е. обновляем текст);
    - сигнал "reget".
 - есть мнение, что букву "а с точкой" и подобные можно записать и одним
   ucs-символом, и двумя "а" и "точка" => код работы с курсором надо поправить.
   Пример: u+00c7 + u+0063 = u+0327

   
 - 
